name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop, feat/* ]
  pull_request:
    branches: [ main, develop ]

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: fiap-vehicle-sale
  ECS_SERVICE: fiap-vehicle-sales-service
  ECS_CLUSTER: fiap-vehicle-sales-cluster
  ECR_REGISTRY: 497986631333.dkr.ecr.us-east-1.amazonaws.com

jobs:
  test-and-build:
    name: Test and Build
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Run tests
        run: npm run test:ci
      
      - name: Build application
        run: npm run build

  deploy:
    name: Deploy to AWS
    runs-on: ubuntu-latest
    needs: test-and-build
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
      
      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Build a docker container and push it to ECR 
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:latest .
          echo "Pushing image to ECR..."
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
      
      - name: Deploy to Amazon ECS
        run: |
          aws ecs update-service \
            --cluster $ECS_CLUSTER \
            --service $ECS_SERVICE \
            --force-new-deployment \
            --region $AWS_REGION
      
      - name: Wait for deployment to complete
        run: |
          echo "Waiting for ECS deployment to complete..."
          aws ecs wait services-stable \
            --cluster $ECS_CLUSTER \
            --services $ECS_SERVICE \
            --region $AWS_REGION
          echo "Deployment completed successfully!"
      
      - name: Verify deployment
        run: |
          # Get the ALB URL from ECS service
          ALB_URL="http://fiap-vehicle-sales-alb-544721435.us-east-1.elb.amazonaws.com"
          echo "Verifying deployment at: $ALB_URL/health"
          
          # Wait a bit for the service to be ready
          sleep 30
          
          # Check health endpoint
          HEALTH_STATUS=$(curl -s -o /dev/null -w "%{http_code}" $ALB_URL/health)
          if [ $HEALTH_STATUS -eq 200 ]; then
            echo "‚úÖ Health check passed! Service is running correctly."
            echo "üåê Swagger UI: $ALB_URL/api-docs"
            echo "üíö Health endpoint: $ALB_URL/health"
          else
            echo "‚ùå Health check failed! HTTP status: $HEALTH_STATUS"
            exit 1
          fi
